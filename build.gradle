plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'me.champeau.jmh' version '0.7.3'
}

group = 'com.alshubaily.fintech'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {

	sparkRuntime {
		canBeResolved = true
		canBeConsumed = false
	}


	compileOnly {
		extendsFrom annotationProcessor
	}

	e2eTestImplementation.extendsFrom testImplementation
	e2eTestImplementation.extendsFrom testRuntimeOnly
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
	}

	spark {
		java {
			srcDirs = ['src/spark/java']
			compileClasspath += configurations.sparkRuntime + sourceSets.main.output
			runtimeClasspath += configurations.sparkRuntime + sourceSets.main.output
		}

	}

	e2eTest {
		java {
			compileClasspath += sourceSets.main.output + sourceSets.test.output
			runtimeClasspath += output + compileClasspath
			srcDir file('src/test/java')
		}
		resources.srcDir file('src/test/resources')
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Application Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.tigerbeetle:tigerbeetle-java:0.16.31'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-crypto:6.2.1'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// Development Tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	sparkRuntime 'org.apache.spark:spark-sql_2.12:3.3.0'
	sparkRuntime 'org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0'
	sparkRuntime 'io.prometheus:simpleclient:0.16.0'
	sparkRuntime 'io.prometheus:simpleclient_hotspot:0.16.0'
	sparkRuntime 'io.prometheus:simpleclient_httpserver:0.16.0'

	testImplementation platform('org.junit:junit-bom:5.10.0')
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
	testImplementation 'org.assertj:assertj-core:3.24.2'

	jmhImplementation 'org.openjdk.jmh:jmh-core:1.36'
	jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
}

tasks.register('sparkJar', Jar) {
	archiveBaseName.set('spark-metrics-stream')
	from(sourceSets.spark.output)
	from(sourceSets.main.output)
	dependsOn tasks.named('compileSparkJava')

	manifest {
		attributes 'Main-Class': 'com.alshubaily.fintech.tiger_ledger_service.spark.Main'
	}

	doLast {
		def deps = configurations.sparkRuntime.dependencies.collect {
			"${it.group}:${it.name}:${it.version}"
		}.join(',')
		def outputFile = layout.buildDirectory.file("libs/spark-packages.txt").get().asFile
		outputFile.text = deps
	}
}

tasks.register('e2eTest', Test) {
	group = 'verification'
	description = 'Runs the E2E tests.'
	useJUnitPlatform()
	testClassesDirs = sourceSets.e2eTest.output.classesDirs
	classpath = sourceSets.e2eTest.runtimeClasspath
	include '**/e2e_test/**'
}

jmh {
	resultFormat = 'JSON'
	resultsFile = file("benchmark_report.json")

	fork = 3
	warmupIterations = 3
	warmup = '5s'
	iterations = 3
	timeOnIteration = '10s'
	threads = 50
}
